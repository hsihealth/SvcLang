partialMessage() ::= <<

/*
GENERATED BY SvcLang - DO NOT MODIFY
*/

package {{namespace}}


trait {{name}}{{#if extendedMessages}} extends {{#concat extendedMessages " with "}}{{name}}{{/concat}}{{else}}{{/if}}
{
{{#concat fieldList "\n"}}  def {{field}} //{{documentation}}{{/concat}}
}


>>

message() ::= <<

/*
GENERATED BY SvcLang - DO NOT MODIFY
*/

package {{namespace}}


case class {{name}} (
{{#concat fieldList ",\n"}}  /* {{documentation}} */
  {{field}}{{/concat}}
){{#if extendedMessages}} extends {{#concat extendedMessages " with "}}{{name}}{{/concat}}{{else}}{{/if}}

>>

requiredField() ::=  "{{name}} : {{dataTypeDeclaration dataType}}{{#if hasDefaultValue}} = {{defaultValue}}{{/if}}"
optionalField() ::= "{{name}} : Option[{{dataTypeDeclaration dataType}}]{{#if hasDefaultValue}} = Some({{defaultValue}}){{else}} = None{{/if}}"

primitiveType() ::= "{{capitalize name}}{{#if hasGenericType}}[{{dataTypeDeclaration genericType}}]{{else}}{{/if}}"

mapType() ::= "Map[String,{{dataTypeDeclaration genericType}}] = Map()"

listType() ::= "List[{{dataTypeDeclaration genericType}}] = List()"

enumType() ::= "String"

unionType() ::= "Any"